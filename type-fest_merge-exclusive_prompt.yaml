messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: type-fest\nSource File Path: source/merge-exclusive.d.ts\n\
    Test File Path: test-d/merge-exclusive.ts\nProject Programming Language: typescript\n\
    Testing Framework: tsd\n### Source File Content\n### Source File Content:\n//\
    \ Helper type. Not useful on its own.\ntype Without<FirstType, SecondType> = {[KeyType\
    \ in Exclude<keyof FirstType, keyof SecondType>]?: never};\n\n/**\nCreate a type\
    \ that has mutually exclusive keys.\n\nThis type was inspired by [this comment](https://github.com/Microsoft/TypeScript/issues/14094#issuecomment-373782604).\n\
    \nThis type works with a helper type, called `Without`. `Without<FirstType, SecondType>`\
    \ produces a type that has only keys from `FirstType` which are not present on\
    \ `SecondType` and sets the value type for these keys to `never`. This helper\
    \ type is then used in `MergeExclusive` to remove keys from either `FirstType`\
    \ or `SecondType`.\n\n@example\n```\nimport type {MergeExclusive} from 'type-fest';\n\
    \ninterface ExclusiveVariation1 {\n\texclusive1: boolean;\n}\n\ninterface ExclusiveVariation2\
    \ {\n\texclusive2: string;\n}\n\ntype ExclusiveOptions = MergeExclusive<ExclusiveVariation1,\
    \ ExclusiveVariation2>;\n\nlet exclusiveOptions: ExclusiveOptions;\n\nexclusiveOptions\
    \ = {exclusive1: true};\n//=> Works\nexclusiveOptions = {exclusive2: 'hi'};\n\
    //=> Works\nexclusiveOptions = {exclusive1: true, exclusive2: 'hi'};\n//=> Error\n\
    ```\n\n@category Object\n*/\nexport type MergeExclusive<FirstType, SecondType>\
    \ =\n\t(FirstType | SecondType) extends object ?\n\t\t(Without<FirstType, SecondType>\
    \ & SecondType) | (Without<SecondType, FirstType> & FirstType) :\n\t\tFirstType\
    \ | SecondType;\n\n\n### Source File Dependency Files Content\n### Dependency\
    \ File: empty.txt\n\nOutput the complete test file, code only, no explanations.\n\
    ### Time\nCurrent time: 2025-04-03 23:34:42\n"
  role: user

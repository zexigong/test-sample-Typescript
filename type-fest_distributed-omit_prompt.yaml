messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: type-fest\nSource File Path: source/distributed-omit.d.ts\n\
    Test File Path: test-d/distributed-omit.ts\nProject Programming Language: typescript\n\
    Testing Framework: tsd\n### Source File Content\n### Source File Content:\nimport\
    \ type {KeysOfUnion} from './keys-of-union';\n\n/**\nOmits keys from a type, distributing\
    \ the operation over a union.\n\nTypeScript's `Omit` doesn't distribute over unions,\
    \ leading to the erasure of unique properties from union members when omitting\
    \ keys. This creates a type that only retains properties common to all union members,\
    \ making it impossible to access member-specific properties after the Omit. Essentially,\
    \ using `Omit` on a union type merges the types into a less specific one, hindering\
    \ type narrowing and property access based on discriminants. This type solves\
    \ that.\n\nExample:\n\n```\ntype A = {\n\tdiscriminant: 'A';\n\tfoo: string;\n\
    \ta: number;\n};\n\ntype B = {\n\tdiscriminant: 'B';\n\tfoo: string;\n\tb: string;\n\
    };\n\ntype Union = A | B;\n\ntype OmittedUnion = Omit<Union, 'foo'>;\n//=> {discriminant:\
    \ 'A' | 'B'}\n\nconst omittedUnion: OmittedUnion = createOmittedUnion();\n\nif\
    \ (omittedUnion.discriminant === 'A') {\n\t// We would like to narrow `omittedUnion`'s\
    \ type\n\t// to `A` here, but we can't because `Omit`\n\t// doesn't distribute\
    \ over unions.\n\n\tomittedUnion.a;\n \t//=> Error: `a` is not a property of `{discriminant:\
    \ 'A' | 'B'}`\n}\n```\n\nWhile `Except` solves this problem, it restricts the\
    \ keys you can omit to the ones that are present in **ALL** union members, where\
    \ `DistributedOmit` allows you to omit keys that are present in **ANY** union\
    \ member.\n\n@example\n```\ntype A = {\n\tdiscriminant: 'A';\n\tfoo: string;\n\
    \ta: number;\n};\n\ntype B = {\n\tdiscriminant: 'B';\n\tfoo: string;\n\tbar: string;\n\
    \tb: string;\n};\n\ntype C = {\n\tdiscriminant: 'C';\n\tbar: string;\n\tc: boolean;\n\
    };\n\n// Notice that `foo` exists in `A` and `B`, but not in `C`, and\n// `bar`\
    \ exists in `B` and `C`, but not in `A`.\n\ntype Union = A | B | C;\n\ntype OmittedUnion\
    \ = DistributedOmit<Union, 'foo' | 'bar'>;\n\nconst omittedUnion: OmittedUnion\
    \ = createOmittedUnion();\n\nif (omittedUnion.discriminant === 'A') {\n\tomittedUnion.a;\n\
    \ \t//=> OK\n\n\tomittedUnion.foo;\n \t//=> Error: `foo` is not a property of\
    \ `{discriminant: 'A'; a: string}`\n\n\tomittedUnion.bar;\n \t//=> Error: `bar`\
    \ is not a property of `{discriminant: 'A'; a: string}`\n}\n```\n\n@category Object\n\
    */\nexport type DistributedOmit<ObjectType, KeyType extends KeysOfUnion<ObjectType>>\
    \ =\n\tObjectType extends unknown\n\t\t? Omit<ObjectType, KeyType>\n\t\t: never;\n\
    \n### Source File Dependency Files Content\n### Dependency File: keys-of-union.d.ts\n\
    import type {UnionToIntersection} from './union-to-intersection';\n\n/**\nCreate\
    \ a union of all keys from a given type, even those exclusive to specific union\
    \ members.\n\nUnlike the native `keyof` keyword, which returns keys present in\
    \ **all** union members, this type returns keys from **any** member.\n\n@link\
    \ https://stackoverflow.com/a/49402091\n\n@example\n```\nimport type {KeysOfUnion}\
    \ from 'type-fest';\n\ntype A = {\n\tcommon: string;\n\ta: number;\n};\n\ntype\
    \ B = {\n\tcommon: string;\n\tb: string;\n};\n\ntype C = {\n\tcommon: string;\n\
    \tc: boolean;\n};\n\ntype Union = A | B | C;\n\ntype CommonKeys = keyof Union;\n\
    //=> 'common'\n\ntype AllKeys = KeysOfUnion<Union>;\n//=> 'common' | 'a' | 'b'\
    \ | 'c'\n```\n\n@category Object\n*/\nexport type KeysOfUnion<ObjectType> =\n\
    \  // Hack to fix https://github.com/sindresorhus/type-fest/issues/1008\n  keyof\
    \ UnionToIntersection<ObjectType extends unknown ? Record<keyof ObjectType, never>\
    \ : never>;\n\nOutput the complete test file, code only, no explanations.\n###\
    \ Time\nCurrent time: 2025-04-03 23:34:27\n"
  role: user

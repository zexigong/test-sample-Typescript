messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: NestJS\nSource File Path: packages/core/injector/opaque-key-factory/deep-hashed-module-opaque-key-factory.ts\n\
    Test File Path: packages/core/test/injector/opaque-key-factory/deep-hashed-module-opaque-key-factory.spec.ts\n\
    Project Programming Language: typescript\nTesting Framework: jest\n### Source\
    \ File Content\n### Source File Content:\nimport { DynamicModule } from '@nestjs/common/interfaces/modules/dynamic-module.interface';\n\
    import { Type } from '@nestjs/common/interfaces/type.interface';\nimport { Logger\
    \ } from '@nestjs/common/services/logger.service';\nimport { randomStringGenerator\
    \ } from '@nestjs/common/utils/random-string-generator.util';\nimport { isFunction,\
    \ isSymbol } from '@nestjs/common/utils/shared.utils';\nimport { createHash }\
    \ from 'crypto';\nimport stringify from 'fast-safe-stringify';\nimport { ModuleOpaqueKeyFactory\
    \ } from './interfaces/module-opaque-key-factory.interface';\n\nconst CLASS_STR\
    \ = 'class ';\nconst CLASS_STR_LEN = CLASS_STR.length;\n\nexport class DeepHashedModuleOpaqueKeyFactory\n\
    \  implements ModuleOpaqueKeyFactory\n{\n  private readonly moduleIdsCache = new\
    \ WeakMap<Type<unknown>, string>();\n  private readonly moduleTokenCache = new\
    \ Map<string, string>();\n  private readonly logger = new Logger(DeepHashedModuleOpaqueKeyFactory.name,\
    \ {\n    timestamp: true,\n  });\n\n  public createForStatic(moduleCls: Type):\
    \ string {\n    const moduleId = this.getModuleId(moduleCls);\n    const moduleName\
    \ = this.getModuleName(moduleCls);\n\n    const key = `${moduleId}_${moduleName}`;\n\
    \    if (this.moduleTokenCache.has(key)) {\n      return this.moduleTokenCache.get(key)!;\n\
    \    }\n\n    const hash = this.hashString(key);\n    this.moduleTokenCache.set(key,\
    \ hash);\n    return hash;\n  }\n\n  public createForDynamic(\n    moduleCls:\
    \ Type<unknown>,\n    dynamicMetadata: Omit<DynamicModule, 'module'>,\n  ): string\
    \ {\n    const moduleId = this.getModuleId(moduleCls);\n    const moduleName =\
    \ this.getModuleName(moduleCls);\n    const opaqueToken = {\n      id: moduleId,\n\
    \      module: moduleName,\n      dynamic: dynamicMetadata,\n    };\n    const\
    \ start = performance.now();\n    const opaqueTokenString = this.getStringifiedOpaqueToken(opaqueToken);\n\
    \    const timeSpentInMs = performance.now() - start;\n\n    if (timeSpentInMs\
    \ > 10) {\n      const formattedTimeSpent = timeSpentInMs.toFixed(2);\n      this.logger.warn(\n\
    \        `The module \"${opaqueToken.module}\" is taking ${formattedTimeSpent}ms\
    \ to serialize, this may be caused by larger objects statically assigned to the\
    \ module. Consider changing the \"moduleIdGeneratorAlgorithm\" option to \"reference\"\
    \ to improve the performance.`,\n      );\n    }\n\n    return this.hashString(opaqueTokenString);\n\
    \  }\n\n  public getStringifiedOpaqueToken(opaqueToken: object | undefined): string\
    \ {\n    // Uses safeStringify instead of JSON.stringify to support circular dynamic\
    \ modules\n    // The replacer function is also required in order to obtain real\
    \ class names\n    // instead of the unified \"Function\" key\n    return opaqueToken\
    \ ? stringify(opaqueToken, this.replacer) : '';\n  }\n\n  public getModuleId(metatype:\
    \ Type<unknown>): string {\n    let moduleId = this.moduleIdsCache.get(metatype);\n\
    \    if (moduleId) {\n      return moduleId;\n    }\n    moduleId = randomStringGenerator();\n\
    \    this.moduleIdsCache.set(metatype, moduleId);\n    return moduleId;\n  }\n\
    \n  public getModuleName(metatype: Type<any>): string {\n    return metatype.name;\n\
    \  }\n\n  private hashString(value: string): string {\n    return createHash('sha256').update(value).digest('hex');\n\
    \  }\n\n  private replacer(key: string, value: any) {\n    if (isFunction(value))\
    \ {\n      const funcAsString = value.toString();\n      const isClass = funcAsString.slice(0,\
    \ CLASS_STR_LEN) === CLASS_STR;\n      if (isClass) {\n        return value.name;\n\
    \      }\n      return funcAsString;\n    }\n    if (isSymbol(value)) {\n    \
    \  return value.toString();\n    }\n    return value;\n  }\n}\n\n### Source File\
    \ Dependency Files Content\n### Dependency File: module-opaque-key-factory.interface.ts\n\
    import { DynamicModule } from '@nestjs/common/interfaces/modules/dynamic-module.interface';\n\
    import { ForwardReference } from '@nestjs/common/interfaces/modules/forward-reference.interface';\n\
    import { Type } from '@nestjs/common/interfaces/type.interface';\n\nexport interface\
    \ ModuleOpaqueKeyFactory {\n  /**\n   * Creates a unique opaque key for the given\
    \ static module.\n   * @param moduleCls A static module class.\n   * @param originalRef\
    \ Original object reference. In most cases, it's the same as `moduleCls`.\n  \
    \ */\n  createForStatic(\n    moduleCls: Type,\n    originalRef: Type | ForwardReference,\n\
    \  ): string;\n  /**\n   * Creates a unique opaque key for the given dynamic module.\n\
    \   * @param moduleCls  A dynamic module class reference.\n   * @param dynamicMetadata\
    \ Dynamic module metadata.\n   * @param originalRef Original object reference.\n\
    \   */\n  createForDynamic(\n    moduleCls: Type<unknown>,\n    dynamicMetadata:\
    \ Omit<DynamicModule, 'module'>,\n    originalRef: DynamicModule | ForwardReference,\n\
    \  ): string;\n}\n\nOutput the complete test file, code only, no explanations.\n\
    ### Time\nCurrent time: 2025-04-11 20:24:57\n"
  role: user

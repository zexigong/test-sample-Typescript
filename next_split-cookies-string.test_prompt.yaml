messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: next\nSource File Path: packages/next/src/server/web/utils.ts\n\
    Test File Path: test/unit/split-cookies-string.test.ts\nProject Programming Language:\
    \ typescript\nTesting Framework: Jest\n### Source File Content\n### Source File\
    \ Content:\nimport type { OutgoingHttpHeaders } from 'http'\nimport {\n  NEXT_INTERCEPTION_MARKER_PREFIX,\n\
    \  NEXT_QUERY_PARAM_PREFIX,\n} from '../../lib/constants'\n\n/**\n * Converts\
    \ a Node.js IncomingHttpHeaders object to a Headers object. Any\n * headers with\
    \ multiple values will be joined with a comma and space. Any\n * headers that\
    \ have an undefined value will be ignored and others will be\n * coerced to strings.\n\
    \ *\n * @param nodeHeaders the headers object to convert\n * @returns the converted\
    \ headers object\n */\nexport function fromNodeOutgoingHttpHeaders(\n  nodeHeaders:\
    \ OutgoingHttpHeaders\n): Headers {\n  const headers = new Headers()\n  for (let\
    \ [key, value] of Object.entries(nodeHeaders)) {\n    const values = Array.isArray(value)\
    \ ? value : [value]\n    for (let v of values) {\n      if (typeof v === 'undefined')\
    \ continue\n      if (typeof v === 'number') {\n        v = v.toString()\n   \
    \   }\n\n      headers.append(key, v)\n    }\n  }\n  return headers\n}\n\n/*\n\
    \  Set-Cookie header field-values are sometimes comma joined in one string. This\
    \ splits them without choking on commas\n  that are within a single set-cookie\
    \ field-value, such as in the Expires portion.\n  This is uncommon, but explicitly\
    \ allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does\
    \ this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n\
    \  React Native's fetch does this for *every* header, including set-cookie.\n\
    \  \n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n\
    \  Credits to: https://github.com/tomball for original and https://github.com/chrusart\
    \ for JavaScript implementation\n*/\nexport function splitCookiesString(cookiesString:\
    \ string) {\n  var cookiesStrings = []\n  var pos = 0\n  var start\n  var ch\n\
    \  var lastComma\n  var nextStart\n  var cookiesSeparatorFound\n\n  function skipWhitespace()\
    \ {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos)))\
    \ {\n      pos += 1\n    }\n    return pos < cookiesString.length\n  }\n\n  function\
    \ notSpecialChar() {\n    ch = cookiesString.charAt(pos)\n\n    return ch !==\
    \ '=' && ch !== ';' && ch !== ','\n  }\n\n  while (pos < cookiesString.length)\
    \ {\n    start = pos\n    cookiesSeparatorFound = false\n\n    while (skipWhitespace())\
    \ {\n      ch = cookiesString.charAt(pos)\n      if (ch === ',') {\n        //\
    \ ',' is a cookie separator if we have later first '=', not ';' or ','\n     \
    \   lastComma = pos\n        pos += 1\n\n        skipWhitespace()\n        nextStart\
    \ = pos\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n\
    \          pos += 1\n        }\n\n        // currently special character\n   \
    \     if (pos < cookiesString.length && cookiesString.charAt(pos) === '=') {\n\
    \          // we found cookies separator\n          cookiesSeparatorFound = true\n\
    \          // pos is inside the next cookie, so back up and return it.\n     \
    \     pos = nextStart\n          cookiesStrings.push(cookiesString.substring(start,\
    \ lastComma))\n          start = pos\n        } else {\n          // in param\
    \ ',' or param separator ';',\n          // we continue from that comma\n    \
    \      pos = lastComma + 1\n        }\n      } else {\n        pos += 1\n    \
    \  }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length)\
    \ {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length))\n\
    \    }\n  }\n\n  return cookiesStrings\n}\n\n/**\n * Converts a Headers object\
    \ to a Node.js OutgoingHttpHeaders object. This is\n * required to support the\
    \ set-cookie header, which may have multiple values.\n *\n * @param headers the\
    \ headers object to convert\n * @returns the converted headers object\n */\nexport\
    \ function toNodeOutgoingHttpHeaders(\n  headers: Headers\n): OutgoingHttpHeaders\
    \ {\n  const nodeHeaders: OutgoingHttpHeaders = {}\n  const cookies: string[]\
    \ = []\n  if (headers) {\n    for (const [key, value] of headers.entries()) {\n\
    \      if (key.toLowerCase() === 'set-cookie') {\n        // We may have gotten\
    \ a comma joined string of cookies, or multiple\n        // set-cookie headers.\
    \ We need to merge them into one header array\n        // to represent all the\
    \ cookies.\n        cookies.push(...splitCookiesString(value))\n        nodeHeaders[key]\
    \ = cookies.length === 1 ? cookies[0] : cookies\n      } else {\n        nodeHeaders[key]\
    \ = value\n      }\n    }\n  }\n  return nodeHeaders\n}\n\n/**\n * Validate the\
    \ correctness of a user-provided URL.\n */\nexport function validateURL(url: string\
    \ | URL): string {\n  try {\n    return String(new URL(String(url)))\n  } catch\
    \ (error: any) {\n    throw new Error(\n      `URL is malformed \"${String(\n\
    \        url\n      )}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`,\n\
    \      { cause: error }\n    )\n  }\n}\n\n/**\n * Normalizes `nxtP` and `nxtI`\
    \ query param values to remove the prefix.\n * This function does not mutate the\
    \ input key.\n */\nexport function normalizeNextQueryParam(key: string): null\
    \ | string {\n  const prefixes = [NEXT_QUERY_PARAM_PREFIX, NEXT_INTERCEPTION_MARKER_PREFIX]\n\
    \  for (const prefix of prefixes) {\n    if (key !== prefix && key.startsWith(prefix))\
    \ {\n      return key.substring(prefix.length)\n    }\n  }\n  return null\n}\n\
    \n### Source File Dependency Files Content\n### Dependency File: constants.ts\n\
    import type { ServerRuntime } from '../types'\n\nexport const NEXT_QUERY_PARAM_PREFIX\
    \ = 'nxtP'\nexport const NEXT_INTERCEPTION_MARKER_PREFIX = 'nxtI'\n\nexport const\
    \ MATCHED_PATH_HEADER = 'x-matched-path'\nexport const PRERENDER_REVALIDATE_HEADER\
    \ = 'x-prerender-revalidate'\nexport const PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER\
    \ =\n  'x-prerender-revalidate-if-generated'\n\nexport const RSC_PREFETCH_SUFFIX\
    \ = '.prefetch.rsc'\nexport const RSC_SEGMENTS_DIR_SUFFIX = '.segments'\nexport\
    \ const RSC_SEGMENT_SUFFIX = '.segment.rsc'\nexport const RSC_SUFFIX = '.rsc'\n\
    export const ACTION_SUFFIX = '.action'\nexport const NEXT_DATA_SUFFIX = '.json'\n\
    export const NEXT_META_SUFFIX = '.meta'\nexport const NEXT_BODY_SUFFIX = '.body'\n\
    \nexport const NEXT_CACHE_TAGS_HEADER = 'x-next-cache-tags'\nexport const NEXT_CACHE_REVALIDATED_TAGS_HEADER\
    \ = 'x-next-revalidated-tags'\nexport const NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER\
    \ =\n  'x-next-revalidate-tag-token'\n\nexport const NEXT_RESUME_HEADER = 'next-resume'\n\
    \n// if these change make sure we update the related\n// documentation as well\n\
    export const NEXT_CACHE_TAG_MAX_ITEMS = 128\nexport const NEXT_CACHE_TAG_MAX_LENGTH\
    \ = 256\nexport const NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024\nexport const NEXT_CACHE_IMPLICIT_TAG_ID\
    \ = '_N_T_'\n\n// in seconds\nexport const CACHE_ONE_YEAR = 31536000\n\n// in\
    \ seconds, represents revalidate=false. I.e. never revaliate.\n// We use this\
    \ value since it can be represented as a V8 SMI for optimal performance.\n// It\
    \ can also be serialized as JSON if it ever leaks accidentally as an actual value.\n\
    export const INFINITE_CACHE = 0xfffffffe\n\n// Patterns to detect middleware files\n\
    export const MIDDLEWARE_FILENAME = 'middleware'\nexport const MIDDLEWARE_LOCATION_REGEXP\
    \ = `(?:src/)?${MIDDLEWARE_FILENAME}`\n\n// Pattern to detect instrumentation\
    \ hooks file\nexport const INSTRUMENTATION_HOOK_FILENAME = 'instrumentation'\n\
    \n// Because on Windows absolute paths in the generated code can break because\
    \ of numbers, eg 1 in the path,\n// we have to use a private alias\nexport const\
    \ PAGES_DIR_ALIAS = 'private-next-pages'\nexport const DOT_NEXT_ALIAS = 'private-dot-next'\n\
    export const ROOT_DIR_ALIAS = 'private-next-root-dir'\nexport const APP_DIR_ALIAS\
    \ = 'private-next-app-dir'\nexport const RSC_MOD_REF_PROXY_ALIAS = 'private-next-rsc-mod-ref-proxy'\n\
    export const RSC_ACTION_VALIDATE_ALIAS = 'private-next-rsc-action-validate'\n\
    export const RSC_ACTION_PROXY_ALIAS = 'private-next-rsc-server-reference'\nexport\
    \ const RSC_CACHE_WRAPPER_ALIAS = 'private-next-rsc-cache-wrapper'\nexport const\
    \ RSC_ACTION_ENCRYPTION_ALIAS = 'private-next-rsc-action-encryption'\nexport const\
    \ RSC_ACTION_CLIENT_WRAPPER_ALIAS =\n  'private-next-rsc-action-client-wrapper'\n\
    \nexport const PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder\
    \ inside of your public folder. This conflicts with the internal '/_next' route.\
    \ https://nextjs.org/docs/messages/public-next-folder-conflict`\n\nexport const\
    \ SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps.\
    \ To use SSG, please remove your getInitialProps`\n\nexport const SERVER_PROPS_GET_INIT_PROPS_CONFLICT\
    \ = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`\n\
    \nexport const SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or\
    \ getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`\n\
    \nexport const STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps,\
    \ https://nextjs.org/docs/messages/404-get-initial-props`\n\nexport const SERVER_PROPS_EXPORT_ERROR\
    \ = `pages with \\`getServerSideProps\\` can not be exported. See more info here:\
    \ https://nextjs.org/docs/messages/gssp-export`\n\nexport const GSP_NO_RETURNED_VALUE\
    \ =\n  'Your `getStaticProps` function did not return an object. Did you forget\
    \ to add a `return`?'\nexport const GSSP_NO_RETURNED_VALUE =\n  'Your `getServerSideProps`\
    \ function did not return an object. Did you forget to add a `return`?'\n\nexport\
    \ const UNSTABLE_REVALIDATE_RENAME_ERROR =\n  'The `unstable_revalidate` property\
    \ is available for general use.\\n' +\n  'Please use `revalidate` instead.'\n\n\
    export const GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component\
    \ and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`\n\
    \nexport const NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\"\
    \ value in your environment. This creates inconsistencies in the project and is\
    \ strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`\n\
    \nexport const SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled\
    \ in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`\n\
    \nexport const ESLINT_DEFAULT_DIRS = ['app', 'pages', 'components', 'lib', 'src']\n\
    \nexport const SERVER_RUNTIME: Record<string, ServerRuntime> = {\n  edge: 'edge',\n\
    \  experimentalEdge: 'experimental-edge',\n  nodejs: 'nodejs',\n}\n\n/**\n * The\
    \ names of the webpack layers. These layers are the primitives for the\n * webpack\
    \ chunks.\n */\nconst WEBPACK_LAYERS_NAMES = {\n  /**\n   * The layer for the\
    \ shared code between the client and server bundles.\n   */\n  shared: 'shared',\n\
    \  /**\n   * The layer for server-only runtime and picking up `react-server` export\
    \ conditions.\n   * Including app router RSC pages and app router custom routes\
    \ and metadata routes.\n   */\n  reactServerComponents: 'rsc',\n  /**\n   * Server\
    \ Side Rendering layer for app (ssr).\n   */\n  serverSideRendering: 'ssr',\n\
    \  /**\n   * The browser client bundle layer for actions.\n   */\n  actionBrowser:\
    \ 'action-browser',\n  /**\n   * The Node.js bundle layer for the API routes.\n\
    \   */\n  apiNode: 'api-node',\n  /**\n   * The Edge Lite bundle layer for the\
    \ API routes.\n   */\n  apiEdge: 'api-edge',\n  /**\n   * The layer for the middleware\
    \ code.\n   */\n  middleware: 'middleware',\n  /**\n   * The layer for the instrumentation\
    \ hooks.\n   */\n  instrument: 'instrument',\n  /**\n   * The layer for assets\
    \ on the edge.\n   */\n  edgeAsset: 'edge-asset',\n  /**\n   * The browser client\
    \ bundle layer for App directory.\n   */\n  appPagesBrowser: 'app-pages-browser',\n\
    \  /**\n   * The browser client bundle layer for Pages directory.\n   */\n  pagesDirBrowser:\
    \ 'pages-dir-browser',\n  /**\n   * The Edge Lite bundle layer for Pages directory.\n\
    \   */\n  pagesDirEdge: 'pages-dir-edge',\n  /**\n   * The Node.js bundle layer\
    \ for Pages directory.\n   */\n  pagesDirNode: 'pages-dir-node',\n} as const\n\
    \nexport type WebpackLayerName =\n  (typeof WEBPACK_LAYERS_NAMES)[keyof typeof\
    \ WEBPACK_LAYERS_NAMES]\n\nconst WEBPACK_LAYERS = {\n  ...WEBPACK_LAYERS_NAMES,\n\
    \  GROUP: {\n    builtinReact: [\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n\
    \      WEBPACK_LAYERS_NAMES.actionBrowser,\n    ],\n    serverOnly: [\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n\
    \      WEBPACK_LAYERS_NAMES.actionBrowser,\n      WEBPACK_LAYERS_NAMES.instrument,\n\
    \      WEBPACK_LAYERS_NAMES.middleware,\n    ],\n    neutralTarget: [\n      //\
    \ pages api\n      WEBPACK_LAYERS_NAMES.apiNode,\n      WEBPACK_LAYERS_NAMES.apiEdge,\n\
    \    ],\n    clientOnly: [\n      WEBPACK_LAYERS_NAMES.serverSideRendering,\n\
    \      WEBPACK_LAYERS_NAMES.appPagesBrowser,\n    ],\n    bundled: [\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n\
    \      WEBPACK_LAYERS_NAMES.actionBrowser,\n      WEBPACK_LAYERS_NAMES.serverSideRendering,\n\
    \      WEBPACK_LAYERS_NAMES.appPagesBrowser,\n      WEBPACK_LAYERS_NAMES.shared,\n\
    \      WEBPACK_LAYERS_NAMES.instrument,\n      WEBPACK_LAYERS_NAMES.middleware,\n\
    \    ],\n    appPages: [\n      // app router pages and layouts\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n\
    \      WEBPACK_LAYERS_NAMES.serverSideRendering,\n      WEBPACK_LAYERS_NAMES.appPagesBrowser,\n\
    \      WEBPACK_LAYERS_NAMES.actionBrowser,\n    ],\n  },\n}\n\nconst WEBPACK_RESOURCE_QUERIES\
    \ = {\n  edgeSSREntry: '__next_edge_ssr_entry__',\n  metadata: '__next_metadata__',\n\
    \  metadataRoute: '__next_metadata_route__',\n  metadataImageMeta: '__next_metadata_image_meta__',\n\
    }\n\nexport { WEBPACK_LAYERS, WEBPACK_RESOURCE_QUERIES }\n\nOutput the complete\
    \ test file, code only, no explanations.\n### Time\nCurrent time: 2025-04-03 18:10:44\n"
  role: user

messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: fp-ts\nSource File Path: src/Magma.ts\n\
    Test File Path: test/Magma.ts\nProject Programming Language: typescript\nTesting\
    \ Framework: vitest\n### Source File Content\n### Source File Content:\n/**\n\
    \ * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat`\
    \ is a binary operation on `A`\n *\n * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html)\
    \ for some instances.\n *\n * @since 2.0.0\n */\n\nimport { Endomorphism } from\
    \ './Endomorphism'\nimport { Predicate } from './Predicate'\n\n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface Magma<A> {\n\
    \  readonly concat: (x: A, y: A) => A\n}\n\n// -------------------------------------------------------------------------------------\n\
    // combinators\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * The dual of a `Magma`, obtained by swapping the arguments of `concat`.\n\
    \ *\n * @example\n * import { reverse, concatAll } from 'fp-ts/Magma'\n * import\
    \ * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(reverse(N.MagmaSub))(0)\n\
    \ *\n * assert.deepStrictEqual(subAll([1, 2, 3]), 2)\n *\n * @since 2.11.0\n */\n\
    export const reverse = <A>(M: Magma<A>): Magma<A> => ({\n  concat: (first, second)\
    \ => M.concat(second, first)\n})\n\n/**\n * @since 2.11.0\n */\nexport const filterFirst\
    \ =\n  <A>(predicate: Predicate<A>) =>\n  (M: Magma<A>): Magma<A> => ({\n    concat:\
    \ (first, second) => (predicate(first) ? M.concat(first, second) : second)\n \
    \ })\n\n/**\n * @since 2.11.0\n */\nexport const filterSecond =\n  <A>(predicate:\
    \ Predicate<A>) =>\n  (M: Magma<A>): Magma<A> => ({\n    concat: (first, second)\
    \ => (predicate(second) ? M.concat(first, second) : first)\n  })\n\n/**\n * @since\
    \ 2.11.0\n */\nexport const endo =\n  <A>(f: Endomorphism<A>) =>\n  (M: Magma<A>):\
    \ Magma<A> => ({\n    concat: (first, second) => M.concat(f(first), f(second))\n\
    \  })\n\n// -------------------------------------------------------------------------------------\n\
    // utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n *\
    \ If `as` is empty, return the provided `startWith` value.\n *\n * @example\n\
    \ * import { concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n\
    \ *\n * const subAll = concatAll(N.MagmaSub)(0)\n *\n * assert.deepStrictEqual(subAll([1,\
    \ 2, 3]), -6)\n *\n * @since 2.11.0\n */\nexport const concatAll =\n  <A>(M: Magma<A>)\
    \ =>\n  (startWith: A) =>\n  (as: ReadonlyArray<A>): A =>\n    as.reduce((a, acc)\
    \ => M.concat(a, acc), startWith)\n\n### Source File Dependency Files Content\n\
    ### Dependency File: Endomorphism.ts\n/**\n * @since 2.11.0\n */\n\nimport { flow,\
    \ identity } from './function'\nimport { Monoid } from './Monoid'\nimport { Semigroup\
    \ } from './Semigroup'\n\n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @since 2.11.0\n */\nexport interface Endomorphism<A> {\n  (a: A): A\n\
    }\n\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport const URI =\
    \ 'Endomorphism'\n\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport\
    \ type URI = typeof URI\n\ndeclare module './HKT' {\n  interface URItoKind<A>\
    \ {\n    readonly [URI]: Endomorphism<A>\n  }\n}\n\n/**\n * Endomorphism form\
    \ a `Semigroup` where the `concat` operation is the usual function composition.\n\
    \ *\n * @category instances\n * @since 2.11.0\n */\nexport const getSemigroup\
    \ = <A = never>(): Semigroup<Endomorphism<A>> => ({\n  concat: (first, second)\
    \ => flow(first, second)\n})\n\n/**\n * Endomorphism form a `Monoid` where the\
    \ `empty` value is the `identity` function.\n *\n * @category instances\n * @since\
    \ 2.11.0\n */\nexport const getMonoid = <A = never>(): Monoid<Endomorphism<A>>\
    \ => ({\n  concat: getSemigroup<A>().concat,\n  empty: identity\n})\n\n\n### Dependency\
    \ File: Predicate.ts\n/**\n * @since 2.11.0\n */\nimport { Contravariant1 } from\
    \ './Contravariant'\nimport { constFalse, constTrue, flow, pipe } from './function'\n\
    import { Monoid } from './Monoid'\nimport { Semigroup } from './Semigroup'\n\n\
    // -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @since 2.11.0\n */\nexport interface Predicate<A> {\n  (a: A): boolean\n\
    }\n\nconst contramap_: Contravariant1<URI>['contramap'] = (predicate, f) => pipe(predicate,\
    \ contramap(f))\n\n/**\n * @since 2.11.0\n */\nexport const contramap =\n  <B,\
    \ A>(f: (b: B) => A) =>\n  (predicate: Predicate<A>): Predicate<B> =>\n    flow(f,\
    \ predicate)\n\n/**\n * @category type lambdas\n * @since 2.11.0\n */\nexport\
    \ const URI = 'Predicate'\n\n/**\n * @category type lambdas\n * @since 2.11.0\n\
    \ */\nexport type URI = typeof URI\n\ndeclare module './HKT' {\n  interface URItoKind<A>\
    \ {\n    readonly [URI]: Predicate<A>\n  }\n}\n\n/**\n * @category instances\n\
    \ * @since 2.11.0\n */\nexport const getSemigroupAny = <A = never>(): Semigroup<Predicate<A>>\
    \ => ({\n  concat: (first, second) => pipe(first, or(second))\n})\n\n/**\n * @category\
    \ instances\n * @since 2.11.0\n */\nexport const getMonoidAny = <A = never>():\
    \ Monoid<Predicate<A>> => ({\n  concat: getSemigroupAny<A>().concat,\n  empty:\
    \ constFalse\n})\n\n/**\n * @category instances\n * @since 2.11.0\n */\nexport\
    \ const getSemigroupAll = <A = never>(): Semigroup<Predicate<A>> => ({\n  concat:\
    \ (first, second) => pipe(first, and(second))\n})\n\n/**\n * @category instances\n\
    \ * @since 2.11.0\n */\nexport const getMonoidAll = <A = never>(): Monoid<Predicate<A>>\
    \ => ({\n  concat: getSemigroupAll<A>().concat,\n  empty: constTrue\n})\n\n/**\n\
    \ * @category instances\n * @since 2.11.0\n */\nexport const Contravariant: Contravariant1<URI>\
    \ = {\n  URI,\n  contramap: contramap_\n}\n\n// -------------------------------------------------------------------------------------\n\
    // utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @since 2.11.0\n */\nexport const not =\n  <A>(predicate: Predicate<A>):\
    \ Predicate<A> =>\n  (a) =>\n    !predicate(a)\n\n/**\n * @since 2.11.0\n */\n\
    export const or =\n  <A>(second: Predicate<A>) =>\n  (first: Predicate<A>): Predicate<A>\
    \ =>\n  (a) =>\n    first(a) || second(a)\n\n/**\n * @since 2.11.0\n */\nexport\
    \ const and =\n  <A>(second: Predicate<A>) =>\n  (first: Predicate<A>): Predicate<A>\
    \ =>\n  (a) =>\n    first(a) && second(a)\n\nOutput the complete test file, code\
    \ only, no explanations.\n### Time\nCurrent time: 2025-04-03 23:00:19\n"
  role: user

messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: fp-ts\nSource File Path: src/Bounded.ts\n\
    Test File Path: test/Bounded.ts\nProject Programming Language: typescript\nTesting\
    \ Framework: vitest\n### Source File Content\n### Source File Content:\n/**\n\
    \ * The `Bounded` type class represents totally ordered types that have an upper\
    \ and lower boundary.\n *\n * Instances should satisfy the following law in addition\
    \ to the `Ord` laws:\n *\n * - Bounded: `bottom <= a <= top`\n *\n * @since 2.0.0\n\
    \ */\nimport * as O from './Ord'\n\nimport Ord = O.Ord\n\n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface Bounded<A> extends\
    \ Ord<A> {\n  readonly top: A\n  readonly bottom: A\n}\n\n// -------------------------------------------------------------------------------------\n\
    // utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Clamp a value between bottom and top values.\n *\n * @category utils\n\
    \ * @since 2.12.0\n */\nexport const clamp = <A>(B: Bounded<A>): ((a: A) => A)\
    \ => O.clamp(B)(B.bottom, B.top)\n\n/**\n * Reverses the Ord of a bound and swaps\
    \ top and bottom values.\n *\n * @category utils\n * @since 2.12.0\n */\nexport\
    \ const reverse = <A>(B: Bounded<A>): Bounded<A> => {\n  const R = O.reverse(B)\n\
    \  return {\n    equals: R.equals,\n    compare: R.compare,\n    top: B.bottom,\n\
    \    bottom: B.top\n  }\n}\n\n// -------------------------------------------------------------------------------------\n\
    // deprecated\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Use [`Bounded`](./number.ts.html#bounded) instead.\n *\n * @category\
    \ zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport const boundedNumber:\
    \ Bounded<number> = {\n  equals: O.ordNumber.equals,\n  compare: O.ordNumber.compare,\n\
    \  top: Infinity,\n  bottom: -Infinity\n}\n\n### Source File Dependency Files\
    \ Content\n### Dependency File: Ord.ts\n/**\n * The `Ord` type class represents\
    \ types which support comparisons with a _total order_.\n *\n * Instances should\
    \ satisfy the laws of total orderings:\n *\n * 1. Reflexivity: `S.compare(a, a)\
    \ <= 0`\n * 2. Antisymmetry: if `S.compare(a, b) <= 0` and `S.compare(b, a) <=\
    \ 0` then `a <-> b`\n * 3. Transitivity: if `S.compare(a, b) <= 0` and `S.compare(b,\
    \ c) <= 0` then `S.compare(a, c) <= 0`\n *\n * @since 2.0.0\n */\nimport { Contravariant1\
    \ } from './Contravariant'\nimport { Eq, eqStrict } from './Eq'\nimport { constant,\
    \ constTrue, pipe } from './function'\nimport { Monoid } from './Monoid'\nimport\
    \ { Ordering } from './Ordering'\nimport { Semigroup } from './Semigroup'\n\n\
    // -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface Ord<A> extends\
    \ Eq<A> {\n  readonly compare: (first: A, second: A) => Ordering\n}\n\n// -------------------------------------------------------------------------------------\n\
    // defaults\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category defaults\n * @since 2.10.0\n */\nexport const equalsDefault\
    \ =\n  <A>(compare: Ord<A>['compare']): Eq<A>['equals'] =>\n  (first, second)\
    \ =>\n    first === second || compare(first, second) === 0\n\n// -------------------------------------------------------------------------------------\n\
    // constructors\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const fromCompare\
    \ = <A>(compare: Ord<A>['compare']): Ord<A> => ({\n  equals: equalsDefault(compare),\n\
    \  compare: (first, second) => (first === second ? 0 : compare(first, second))\n\
    })\n\n// -------------------------------------------------------------------------------------\n\
    // combinators\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Given a tuple of `Ord`s returns an `Ord` for the tuple.\n *\n * @example\n\
    \ * import { tuple } from 'fp-ts/Ord'\n * import * as B from 'fp-ts/boolean'\n\
    \ * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n\
    \ *\n * const O = tuple(S.Ord, N.Ord, B.Ord)\n * assert.strictEqual(O.compare(['a',\
    \ 1, true], ['b', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true],\
    \ ['a', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a',\
    \ 1, false]), 1)\n *\n * @since 2.10.0\n */\nexport const tuple = <A extends ReadonlyArray<unknown>>(...ords:\
    \ { [K in keyof A]: Ord<A[K]> }): Ord<Readonly<A>> =>\n  fromCompare((first, second)\
    \ => {\n    let i = 0\n    for (; i < ords.length - 1; i++) {\n      const r =\
    \ ords[i].compare(first[i], second[i])\n      if (r !== 0) {\n        return r\n\
    \      }\n    }\n    return ords[i].compare(first[i], second[i])\n  })\n\n/**\n\
    \ * @since 2.10.0\n */\nexport const reverse = <A>(O: Ord<A>): Ord<A> => fromCompare((first,\
    \ second) => O.compare(second, first))\n\n/* istanbul ignore next */\nconst contramap_:\
    \ <A, B>(fa: Ord<A>, f: (b: B) => A) => Ord<B> = (fa, f) => pipe(fa, contramap(f))\n\
    \n/**\n * A typical use case for `contramap` would be like, given some `User`\
    \ type, to construct an `Ord<User>`.\n *\n * We can do so with a function from\
    \ `User -> X` where `X` is some value that we know how to compare\n * for ordering\
    \ (meaning we have an `Ord<X>`)\n *\n * For example, given the following `User`\
    \ type, there are lots of possible choices for `X`,\n * but let's say we want\
    \ to sort a list of users by `lastName`.\n *\n * If we have a way of comparing\
    \ `lastName`s for ordering (`ordLastName: Ord<string>`) and we know how to go\
    \ from `User -> string`,\n * using `contramap` we can do this\n *\n * @example\n\
    \ * import { pipe } from 'fp-ts/function'\n * import { contramap, Ord } from 'fp-ts/Ord'\n\
    \ * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n\
    \ *\n * interface User {\n *   readonly firstName: string\n *   readonly lastName:\
    \ string\n * }\n *\n * const ordLastName: Ord<string> = S.Ord\n *\n * const ordByLastName:\
    \ Ord<User> = pipe(\n *   ordLastName,\n *   contramap((user) => user.lastName)\n\
    \ * )\n *\n * assert.deepStrictEqual(\n *   RA.sort(ordByLastName)([\n *     {\
    \ firstName: 'a', lastName: 'd' },\n *     { firstName: 'c', lastName: 'b' }\n\
    \ *   ]),\n *   [\n *     { firstName: 'c', lastName: 'b' },\n *     { firstName:\
    \ 'a', lastName: 'd' }\n *   ]\n * )\n *\n * @since 2.0.0\n */\nexport const contramap:\
    \ <A, B>(f: (b: B) => A) => (fa: Ord<A>) => Ord<B> = (f) => (fa) =>\n  fromCompare((first,\
    \ second) => fa.compare(f(first), f(second)))\n\n/**\n * @category type lambdas\n\
    \ * @since 2.0.0\n */\nexport const URI = 'Ord'\n\n/**\n * @category type lambdas\n\
    \ * @since 2.0.0\n */\nexport type URI = typeof URI\n\ndeclare module './HKT'\
    \ {\n  interface URItoKind<A> {\n    readonly [URI]: Ord<A>\n  }\n}\n\n/**\n *\
    \ A typical use case for the `Semigroup` instance of `Ord` is merging two or more\
    \ orderings.\n *\n * For example the following snippet builds an `Ord` for a type\
    \ `User` which\n * sorts by `created` date descending, and **then** `lastName`\n\
    \ *\n * @example\n * import * as D from 'fp-ts/Date'\n * import { pipe } from\
    \ 'fp-ts/function'\n * import { contramap, getSemigroup, Ord, reverse } from 'fp-ts/Ord'\n\
    \ * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n\
    \ *\n * interface User {\n *   readonly id: string\n *   readonly lastName: string\n\
    \ *   readonly created: Date\n * }\n *\n * const ordByLastName: Ord<User> = pipe(\n\
    \ *   S.Ord,\n *   contramap((user) => user.lastName)\n * )\n *\n * const ordByCreated:\
    \ Ord<User> = pipe(\n *   D.Ord,\n *   contramap((user) => user.created)\n * )\n\
    \ *\n * const ordUserByCreatedDescThenLastName = getSemigroup<User>().concat(\n\
    \ *   reverse(ordByCreated),\n *   ordByLastName\n * )\n *\n * assert.deepStrictEqual(\n\
    \ *   RA.sort(ordUserByCreatedDescThenLastName)([\n *     { id: 'c', lastName:\
    \ 'd', created: new Date(1973, 10, 30) },\n *     { id: 'a', lastName: 'b', created:\
    \ new Date(1973, 10, 30) },\n *     { id: 'e', lastName: 'f', created: new Date(1980,\
    \ 10, 30) }\n *   ]),\n *   [\n *     { id: 'e', lastName: 'f', created: new Date(1980,\
    \ 10, 30) },\n *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30)\
    \ },\n *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) }\n * \
    \  ]\n * )\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getSemigroup\
    \ = <A = never>(): Semigroup<Ord<A>> => ({\n  concat: (first, second) =>\n   \
    \ fromCompare((a, b) => {\n      const ox = first.compare(a, b)\n      return\
    \ ox !== 0 ? ox : second.compare(a, b)\n    })\n})\n\n/**\n * Returns a `Monoid`\
    \ such that:\n *\n * - its `concat(ord1, ord2)` operation will order first by\
    \ `ord1`, and then by `ord2`\n * - its `empty` value is an `Ord` that always considers\
    \ compared elements equal\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n\
    \ * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'\n * import * as\
    \ S from 'fp-ts/string'\n * import * as B from 'fp-ts/boolean'\n * import { pipe\
    \ } from 'fp-ts/function'\n * import { concatAll } from 'fp-ts/Monoid'\n * import\
    \ * as N from 'fp-ts/number'\n *\n * interface User {\n *   readonly id: number\n\
    \ *   readonly name: string\n *   readonly age: number\n *   readonly rememberMe:\
    \ boolean\n * }\n *\n * const byName = pipe(\n *   S.Ord,\n *   contramap((p:\
    \ User) => p.name)\n * )\n *\n * const byAge = pipe(\n *   N.Ord,\n *   contramap((p:\
    \ User) => p.age)\n * )\n *\n * const byRememberMe = pipe(\n *   B.Ord,\n *  \
    \ contramap((p: User) => p.rememberMe)\n * )\n *\n * const M = getMonoid<User>()\n\
    \ *\n * const users: Array<User> = [\n *   { id: 1, name: 'Guido', age: 47, rememberMe:\
    \ false },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   {\
    \ id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio',\
    \ age: 44, rememberMe: true }\n * ]\n *\n * // sort by name, then by age, then\
    \ by `rememberMe`\n * const O1 = concatAll(M)([byName, byAge, byRememberMe])\n\
    \ * assert.deepStrictEqual(sort(O1)(users), [\n *   { id: 3, name: 'Giulio', age:\
    \ 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe:\
    \ true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id:\
    \ 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * // now `rememberMe\
    \ = true` first, then by name, then by age\n * const O2 = concatAll(M)([reverse(byRememberMe),\
    \ byName, byAge])\n * assert.deepStrictEqual(sort(O2)(users), [\n *   { id: 4,\
    \ name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age:\
    \ 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe:\
    \ false },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n\
    \ *\n * @category instances\n * @since 2.4.0\n */\nexport const getMonoid = <A\
    \ = never>(): Monoid<Ord<A>> => ({\n  concat: getSemigroup<A>().concat,\n  empty:\
    \ fromCompare(() => 0)\n})\n\n/**\n * @category instances\n * @since 2.7.0\n */\n\
    export const Contravariant: Contravariant1<URI> = {\n  URI,\n  contramap: contramap_\n\
    }\n\n// -------------------------------------------------------------------------------------\n\
    // utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @since 2.11.0\n */\nexport const trivial: Ord<unknown> = {\n  equals:\
    \ constTrue,\n  compare: /*#__PURE__*/ constant(0)\n}\n\n/**\n * @since 2.11.0\n\
    \ */\nexport const equals =\n  <A>(O: Ord<A>) =>\n  (second: A) =>\n  (first:\
    \ A): boolean =>\n    first === second || O.compare(first, second) === 0\n\n//\
    \ TODO: curry in v3\n/**\n * Test whether one value is _strictly less than_ another\n\
    \ *\n * @since 2.0.0\n */\nexport const lt =\n  <A>(O: Ord<A>) =>\n  (first: A,\
    \ second: A): boolean =>\n    O.compare(first, second) === -1\n\n// TODO: curry\
    \ in v3\n/**\n * Test whether one value is _strictly greater than_ another\n *\n\
    \ * @since 2.0.0\n */\nexport const gt =\n  <A>(O: Ord<A>) =>\n  (first: A, second:\
    \ A): boolean =>\n    O.compare(first, second) === 1\n\n// TODO: curry in v3\n\
    /**\n * Test whether one value is _non-strictly less than_ another\n *\n * @since\
    \ 2.0.0\n */\nexport const leq =\n  <A>(O: Ord<A>) =>\n  (first: A, second: A):\
    \ boolean =>\n    O.compare(first, second) !== 1\n\n// TODO: curry in v3\n/**\n\
    \ * Test whether one value is _non-strictly greater than_ another\n *\n * @since\
    \ 2.0.0\n */\nexport const geq =\n  <A>(O: Ord<A>) =>\n  (first: A, second: A):\
    \ boolean =>\n    O.compare(first, second) !== -1\n\n// TODO: curry in v3\n/**\n\
    \ * Take the minimum of two values. If they are considered equal, the first argument\
    \ is chosen\n *\n * @since 2.0.0\n */\nexport const min =\n  <A>(O: Ord<A>) =>\n\
    \  (first: A, second: A): A =>\n    first === second || O.compare(first, second)\
    \ < 1 ? first : second\n\n// TODO: curry in v3\n/**\n * Take the maximum of two\
    \ values. If they are considered equal, the first argument is chosen\n *\n * @since\
    \ 2.0.0\n */\nexport const max =\n  <A>(O: Ord<A>) =>\n  (first: A, second: A):\
    \ A =>\n    first === second || O.compare(first, second) > -1 ? first : second\n\
    \n/**\n * Clamp a value between a minimum and a maximum\n *\n * @since 2.0.0\n\
    \ */\nexport const clamp = <A>(O: Ord<A>): ((low: A, hi: A) => (a: A) => A) =>\
    \ {\n  const minO = min(O)\n  const maxO = max(O)\n  return (low, hi) => (a) =>\
    \ maxO(minO(a, hi), low)\n}\n\n/**\n * Test whether a value is between a minimum\
    \ and a maximum (inclusive)\n *\n * @since 2.0.0\n */\nexport const between =\
    \ <A>(O: Ord<A>): ((low: A, hi: A) => (a: A) => boolean) => {\n  const ltO = lt(O)\n\
    \  const gtO = gt(O)\n  return (low, hi) => (a) => ltO(a, low) || gtO(a, hi) ?\
    \ false : true\n}\n\n// -------------------------------------------------------------------------------------\n\
    // deprecated\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since\
    \ 2.0.0\n * @deprecated\n */\nexport const getTupleOrd: <T extends ReadonlyArray<Ord<any>>>(\n\
    \  ...ords: T\n) => Ord<{ [K in keyof T]: T[K] extends Ord<infer A> ? A : never\
    \ }> = tuple\n\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone\
    \ of death\n * @since 2.0.0\n * @deprecated\n */\nexport const getDualOrd = reverse\n\
    \n/**\n * Use [`Contravariant`](#contravariant) instead.\n *\n * @category zone\
    \ of death\n * @since 2.0.0\n * @deprecated\n */\nexport const ord: Contravariant1<URI>\
    \ = Contravariant\n\n// default compare for primitive types\nfunction compare(first:\
    \ any, second: any): Ordering {\n  return first < second ? -1 : first > second\
    \ ? 1 : 0\n}\n\nconst strictOrd = {\n  equals: eqStrict.equals,\n  compare\n}\n\
    \n/**\n * Use [`Ord`](./boolean.ts.html#ord) instead.\n *\n * @category zone of\
    \ death\n * @since 2.0.0\n * @deprecated\n */\nexport const ordBoolean: Ord<boolean>\
    \ = strictOrd\n\n/**\n * Use [`Ord`](./string.ts.html#ord) instead.\n *\n * @category\
    \ zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport const ordString:\
    \ Ord<string> = strictOrd\n\n/**\n * Use [`Ord`](./number.ts.html#ord) instead.\n\
    \ *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport\
    \ const ordNumber: Ord<number> = strictOrd\n\n/**\n * Use [`Ord`](./Date.ts.html#ord)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const ordDate: Ord<Date> = /*#__PURE__*/ pipe(\n  ordNumber,\n  /*#__PURE__*/\n\
    \  contramap((date) => date.valueOf())\n)\n\nOutput the complete test file, code\
    \ only, no explanations.\n### Time\nCurrent time: 2025-04-03 22:58:43\n"
  role: user

messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: type-fest\nSource File Path: source/find-global-type.d.ts\n\
    Test File Path: test-d/find-global-type.ts\nProject Programming Language: typescript\n\
    Testing Framework: tsd\n### Source File Content\n### Source File Content:\n/**\n\
    Tries to find the type of a global with the given name.\n\nLimitations: Due to\
    \ peculiarities with the behavior of `globalThis`, \"globally defined\" only includes\
    \ `var` declarations in `declare global` blocks, not `let` or `const` declarations.\n\
    \n@example\n```\nimport type {FindGlobalType} from 'type-fest';\n\ndeclare global\
    \ {\n\tconst foo: number; // let and const don't work\n\tvar bar: string;   //\
    \ var works\n}\n\ntype FooType = FindGlobalType<'foo'>     //=> never (let/const\
    \ don't work)\ntype BarType = FindGlobalType<'bar'>     //=> string\ntype OtherType\
    \ = FindGlobalType<'other'> //=> never (no global named 'other')\n```\n\n@category\
    \ Utilities\n*/\nexport type FindGlobalType<Name extends string> = typeof globalThis\
    \ extends Record<Name, infer T> ? T : never;\n\n/**\nTries to find one or more\
    \ types from their globally-defined constructors.\n\nUse-case: Conditionally referencing\
    \ DOM types only when the DOM library present.\n\n*Limitations:* Due to peculiarities\
    \ with the behavior of `globalThis`, \"globally defined\" has a narrow definition\
    \ in this case. Declaring a class in a `declare global` block won't work, instead\
    \ you must declare its type using an interface and declare its constructor as\
    \ a `var` (*not* `let`/`const`) inside the `declare global` block.\n\n@example\n\
    ```\nimport type {FindGlobalInstanceType} from 'type-fest';\n\nclass Point {\n\
    \tconstructor(public x: number, public y: number) {}\n}\n\ntype PointLike = Point\
    \ | FindGlobalInstanceType<'DOMPoint'>;\n```\n\n@example\n```\nimport type {FindGlobalInstanceType}\
    \ from 'type-fest';\n\ndeclare global {\n\t// Class syntax won't add the key to\
    \ `globalThis`\n\tclass Foo {}\n\n\t// interface + constructor style works\n\t\
    interface Bar {}\n\tvar Bar: new () => Bar; // Not let or const\n}\n\ntype FindFoo\
    \ = FindGlobalInstanceType<'Foo'>; // Doesn't work\ntype FindBar = FindGlobalInstanceType<'Bar'>;\
    \ // Works\n```\n\n@category Utilities\n*/\nexport type FindGlobalInstanceType<Name\
    \ extends string> =\n\tName extends string\n\t\t? typeof globalThis extends Record<Name,\
    \ abstract new (...arguments: any[]) => infer T> ? T : never\n\t\t: never;\n\n\
    ### Source File Dependency Files Content\n### Dependency File: empty.txt\n\nOutput\
    \ the complete test file, code only, no explanations.\n### Time\nCurrent time:\
    \ 2025-04-03 23:34:35\n"
  role: user

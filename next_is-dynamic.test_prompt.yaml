messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: next\nSource File Path: packages/next/src/shared/lib/router/utils/is-dynamic.ts\n\
    Test File Path: packages/next/src/shared/lib/router/utils/is-dynamic.test.ts\n\
    Project Programming Language: typescript\nTesting Framework: jest\n### Source\
    \ File Content\n### Source File Content:\nimport {\n  extractInterceptionRouteInformation,\n\
    \  isInterceptionRouteAppPath,\n} from './interception-routes'\n\n// Identify\
    \ /.*[param].*/ in route string\nconst TEST_ROUTE = /\\/[^/]*\\[[^/]+\\][^/]*(?=\\\
    /|$)/\n\n// Identify /[param]/ in route string\nconst TEST_STRICT_ROUTE = /\\\
    /\\[[^/]+\\](?=\\/|$)/\n\n/**\n * Check if a route is dynamic.\n *\n * @param\
    \ route - The route to check.\n * @param strict - Whether to use strict mode which\
    \ prohibits segments with prefixes/suffixes (default: true).\n * @returns Whether\
    \ the route is dynamic.\n */\nexport function isDynamicRoute(route: string, strict:\
    \ boolean = true): boolean {\n  if (isInterceptionRouteAppPath(route)) {\n   \
    \ route = extractInterceptionRouteInformation(route).interceptedRoute\n  }\n\n\
    \  if (strict) {\n    return TEST_STRICT_ROUTE.test(route)\n  }\n\n  return TEST_ROUTE.test(route)\n\
    }\n\n### Source File Dependency Files Content\n### Dependency File: interception-routes.ts\n\
    import { normalizeAppPath } from './app-paths'\n\n// order matters here, the first\
    \ match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n  '(..)(..)',\n\
    \  '(.)',\n  '(..)',\n  '(...)',\n] as const\n\nexport function isInterceptionRouteAppPath(path:\
    \ string): boolean {\n  // TODO-APP: add more serious validation\n  return (\n\
    \    path\n      .split('/')\n      .find((segment) =>\n        INTERCEPTION_ROUTE_MARKERS.find((m)\
    \ => segment.startsWith(m))\n      ) !== undefined\n  )\n}\n\nexport function\
    \ extractInterceptionRouteInformation(path: string) {\n  let interceptingRoute:\
    \ string | undefined,\n    marker: (typeof INTERCEPTION_ROUTE_MARKERS)[number]\
    \ | undefined,\n    interceptedRoute: string | undefined\n\n  for (const segment\
    \ of path.split('/')) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n\
    \    if (marker) {\n      ;[interceptingRoute, interceptedRoute] = path.split(marker,\
    \ 2)\n      break\n    }\n  }\n\n  if (!interceptingRoute || !marker || !interceptedRoute)\
    \ {\n    throw new Error(\n      `Invalid interception route: ${path}. Must be\
    \ in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`\n \
    \   )\n  }\n\n  interceptingRoute = normalizeAppPath(interceptingRoute) // normalize\
    \ the path, e.g. /(blog)/feed -> /feed\n\n  switch (marker) {\n    case '(.)':\n\
    \      // (.) indicates that we should match with sibling routes, so we just need\
    \ to append the intercepted route to the intercepting route\n      if (interceptingRoute\
    \ === '/') {\n        interceptedRoute = `/${interceptedRoute}`\n      } else\
    \ {\n        interceptedRoute = interceptingRoute + '/' + interceptedRoute\n \
    \     }\n      break\n    case '(..)':\n      // (..) indicates that we should\
    \ match at one level up, so we need to remove the last segment of the intercepting\
    \ route\n      if (interceptingRoute === '/') {\n        throw new Error(\n  \
    \        `Invalid interception route: ${path}. Cannot use (..) marker at the root\
    \ level, use (.) instead.`\n        )\n      }\n      interceptedRoute = interceptingRoute\n\
    \        .split('/')\n        .slice(0, -1)\n        .concat(interceptedRoute)\n\
    \        .join('/')\n      break\n    case '(...)':\n      // (...) will match\
    \ the route segment in the root directory, so we need to use the root directory\
    \ to prepend the intercepted route\n      interceptedRoute = '/' + interceptedRoute\n\
    \      break\n    case '(..)(..)':\n      // (..)(..) indicates that we should\
    \ match at two levels up, so we need to remove the last two segments of the intercepting\
    \ route\n\n      const splitInterceptingRoute = interceptingRoute.split('/')\n\
    \      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(\n \
    \         `Invalid interception route: ${path}. Cannot use (..)(..) marker at\
    \ the root level or one level up.`\n        )\n      }\n\n      interceptedRoute\
    \ = splitInterceptingRoute\n        .slice(0, -2)\n        .concat(interceptedRoute)\n\
    \        .join('/')\n      break\n    default:\n      throw new Error('Invariant:\
    \ unexpected marker')\n  }\n\n  return { interceptingRoute, interceptedRoute }\n\
    }\n\nOutput the complete test file, code only, no explanations.\n### Time\nCurrent\
    \ time: 2025-04-11 20:34:11\n"
  role: user

messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: next\nSource File Path: packages/next/src/server/web/web-on-close.ts\n\
    Test File Path: packages/next/src/server/web/web-on-close.test.ts\nProject Programming\
    \ Language: typescript\nTesting Framework: Jest\n### Source File Content\n###\
    \ Source File Content:\n/** Monitor when the consumer finishes reading the response\
    \ body.\nthat's as close as we can get to `res.on('close')` using web APIs.\n\
    */\nexport function trackBodyConsumed(\n  body: string | ReadableStream,\n  onEnd:\
    \ () => void\n): BodyInit {\n  if (typeof body === 'string') {\n    const generator\
    \ = async function* generate() {\n      const encoder = new TextEncoder()\n  \
    \    yield encoder.encode(body)\n      onEnd()\n    }\n    // @ts-expect-error\
    \ BodyInit typings doesn't seem to include AsyncIterables even though it's supported\
    \ in practice\n    return generator()\n  } else {\n    return trackStreamConsumed(body,\
    \ onEnd)\n  }\n}\n\nexport function trackStreamConsumed<TChunk>(\n  stream: ReadableStream<TChunk>,\n\
    \  onEnd: () => void\n): ReadableStream<TChunk> {\n  // NOTE: This function must\
    \ handle `stream` being aborted or cancelled,\n  // so it can't just be this:\n\
    \  //\n  //   return stream.pipeThrough(new TransformStream({ flush() { onEnd()\
    \ } }))\n  //\n  // because that doesn't handle cancellations.\n  // (and cancellation\
    \ handling via `Transformer.cancel` is only available in node >20)\n  const dest\
    \ = new TransformStream()\n  const runOnEnd = () => onEnd()\n  stream.pipeTo(dest.writable).then(runOnEnd,\
    \ runOnEnd)\n  return dest.readable\n}\n\nexport class CloseController {\n  private\
    \ target = new EventTarget()\n  listeners = 0\n  isClosed = false\n\n  onClose(callback:\
    \ () => void) {\n    if (this.isClosed) {\n      throw new Error('Cannot subscribe\
    \ to a closed CloseController')\n    }\n\n    this.target.addEventListener('close',\
    \ callback)\n    this.listeners++\n  }\n\n  dispatchClose() {\n    if (this.isClosed)\
    \ {\n      throw new Error('Cannot close a CloseController multiple times')\n\
    \    }\n    if (this.listeners > 0) {\n      this.target.dispatchEvent(new Event('close'))\n\
    \    }\n    this.isClosed = true\n  }\n}\n\n### Source File Dependency Files Content\n\
    ### Dependency File: empty.txt\n\nOutput the complete test file, code only, no\
    \ explanations.\n### Time\nCurrent time: 2025-04-03 18:10:55\n"
  role: user

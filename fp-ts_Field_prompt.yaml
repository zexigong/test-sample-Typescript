messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: fp-ts\nSource File Path: src/Field.ts\n\
    Test File Path: test/Field.ts\nProject Programming Language: typescript\nTesting\
    \ Framework: vitest\n### Source File Content\n### Source File Content:\n/**\n\
    \ * Adapted from https://github.com/purescript/purescript-prelude/blob/master/src/Data/Field.purs\n\
    \ *\n * @since 2.0.0\n */\nimport { Eq } from './Eq'\nimport { Ring } from './Ring'\n\
    \n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface Field<A> extends\
    \ Ring<A> {\n  readonly degree: (a: A) => number\n  readonly div: (x: A, y: A)\
    \ => A\n  readonly mod: (x: A, y: A) => A\n}\n\n// -------------------------------------------------------------------------------------\n\
    // utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * The *greatest common divisor* of two values\n *\n * @since 2.0.0\n */\n\
    export function gcd<A>(E: Eq<A>, field: Field<A>): (x: A, y: A) => A {\n  const\
    \ zero = field.zero\n  const f = (x: A, y: A): A => (E.equals(y, zero) ? x : f(y,\
    \ field.mod(x, y)))\n  return f\n}\n\n/**\n * The *least common multiple* of two\
    \ values\n *\n * @since 2.0.0\n */\nexport function lcm<A>(E: Eq<A>, F: Field<A>):\
    \ (x: A, y: A) => A {\n  const zero = F.zero\n  const gcdSF = gcd(E, F)\n  return\
    \ (x, y) => (E.equals(x, zero) || E.equals(y, zero) ? zero : F.div(F.mul(x, y),\
    \ gcdSF(x, y)))\n}\n\n// -------------------------------------------------------------------------------------\n\
    // deprecated\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Use [`Field`](./number.ts.html#field) instead.\n *\n * @category zone\
    \ of death\n * @since 2.0.0\n * @deprecated\n */\nexport const fieldNumber: Field<number>\
    \ = {\n  add: (x, y) => x + y,\n  zero: 0,\n  mul: (x, y) => x * y,\n  one: 1,\n\
    \  sub: (x, y) => x - y,\n  degree: (_) => 1,\n  div: (x, y) => x / y,\n  mod:\
    \ (x, y) => x % y\n}\n\n### Source File Dependency Files Content\n### Dependency\
    \ File: Eq.ts\n/**\n * The `Eq` type class represents types which support decidable\
    \ equality.\n *\n * Instances must satisfy the following laws:\n *\n * 1. Reflexivity:\
    \ `E.equals(a, a) === true`\n * 2. Symmetry: `E.equals(a, b) === E.equals(b, a)`\n\
    \ * 3. Transitivity: if `E.equals(a, b) === true` and `E.equals(b, c) === true`,\
    \ then `E.equals(a, c) === true`\n *\n * @since 2.0.0\n */\nimport { Contravariant1\
    \ } from './Contravariant'\nimport { pipe } from './function'\nimport { Monoid\
    \ } from './Monoid'\nimport { ReadonlyRecord } from './ReadonlyRecord'\nimport\
    \ { Semigroup } from './Semigroup'\n\n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface Eq<A> {\n  readonly\
    \ equals: (x: A, y: A) => boolean\n}\n\n// -------------------------------------------------------------------------------------\n\
    // constructors\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const fromEquals\
    \ = <A>(equals: Eq<A>['equals']): Eq<A> => ({\n  equals: (x, y) => x === y ||\
    \ equals(x, y)\n})\n\n// -------------------------------------------------------------------------------------\n\
    // combinators\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @since 2.10.0\n */\nexport const struct = <A>(eqs: { [K in keyof A]:\
    \ Eq<A[K]> }): Eq<{ readonly [K in keyof A]: A[K] }> =>\n  fromEquals((first,\
    \ second) => {\n    for (const key in eqs) {\n      if (!eqs[key].equals(first[key],\
    \ second[key])) {\n        return false\n      }\n    }\n    return true\n  })\n\
    \n/**\n * Given a tuple of `Eq`s returns a `Eq` for the tuple\n *\n * @example\n\
    \ * import { tuple } from 'fp-ts/Eq'\n * import * as S from 'fp-ts/string'\n *\
    \ import * as N from 'fp-ts/number'\n * import * as B from 'fp-ts/boolean'\n *\n\
    \ * const E = tuple(S.Eq, N.Eq, B.Eq)\n * assert.strictEqual(E.equals(['a', 1,\
    \ true], ['a', 1, true]), true)\n * assert.strictEqual(E.equals(['a', 1, true],\
    \ ['b', 1, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a',\
    \ 2, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]),\
    \ false)\n *\n * @since 2.10.0\n */\nexport const tuple = <A extends ReadonlyArray<unknown>>(...eqs:\
    \ { [K in keyof A]: Eq<A[K]> }): Eq<Readonly<A>> =>\n  fromEquals((first, second)\
    \ => eqs.every((E, i) => E.equals(first[i], second[i])))\n\n/* istanbul ignore\
    \ next */\nconst contramap_: <A, B>(fa: Eq<A>, f: (b: B) => A) => Eq<B> = (fa,\
    \ f) => pipe(fa, contramap(f))\n\n/**\n * A typical use case for `contramap` would\
    \ be like, given some `User` type, to construct an `Eq<User>`.\n *\n * We can\
    \ do so with a function from `User -> X` where `X` is some value that we know\
    \ how to compare\n * for equality (meaning we have an `Eq<X>`)\n *\n * For example,\
    \ given the following `User` type, we want to construct an `Eq<User>` that just\
    \ looks at the `key` field\n * for each user (since it's known to be unique).\n\
    \ *\n * If we have a way of comparing `UUID`s for equality (`eqUUID: Eq<UUID>`)\
    \ and we know how to go from `User -> UUID`,\n * using `contramap` we can do this\n\
    \ *\n * @example\n * import { contramap, Eq } from 'fp-ts/Eq'\n * import { pipe\
    \ } from 'fp-ts/function'\n * import * as S from 'fp-ts/string'\n *\n * type UUID\
    \ = string\n *\n * interface User {\n *   readonly key: UUID\n *   readonly firstName:\
    \ string\n *   readonly lastName: string\n * }\n *\n * const eqUUID: Eq<UUID>\
    \ = S.Eq\n *\n * const eqUserByKey: Eq<User> = pipe(\n *   eqUUID,\n *   contramap((user)\
    \ => user.key)\n * )\n *\n * assert.deepStrictEqual(\n *   eqUserByKey.equals(\n\
    \ *     { key: 'k1', firstName: 'a1', lastName: 'b1' },\n *     { key: 'k2', firstName:\
    \ 'a1', lastName: 'b1' }\n *   ),\n *   false\n * )\n * assert.deepStrictEqual(\n\
    \ *   eqUserByKey.equals(\n *     { key: 'k1', firstName: 'a1', lastName: 'b1'\
    \ },\n *     { key: 'k1', firstName: 'a2', lastName: 'b1' }\n *   ),\n *   true\n\
    \ * )\n *\n * @since 2.0.0\n */\nexport const contramap: <A, B>(f: (b: B) => A)\
    \ => (fa: Eq<A>) => Eq<B> = (f) => (fa) =>\n  fromEquals((x, y) => fa.equals(f(x),\
    \ f(y)))\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport const\
    \ URI = 'Eq'\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport type\
    \ URI = typeof URI\n\ndeclare module './HKT' {\n  interface URItoKind<A> {\n \
    \   readonly [URI]: Eq<A>\n  }\n}\n\n/**\n * @category instances\n * @since 2.5.0\n\
    \ */\nexport const eqStrict: Eq<unknown> = {\n  equals: (a, b) => a === b\n}\n\
    \nconst empty: Eq<unknown> = {\n  equals: () => true\n}\n\n/**\n * @category instances\n\
    \ * @since 2.10.0\n */\nexport const getSemigroup = <A>(): Semigroup<Eq<A>> =>\
    \ ({\n  concat: (x, y) => fromEquals((a, b) => x.equals(a, b) && y.equals(a, b))\n\
    })\n\n/**\n * @category instances\n * @since 2.6.0\n */\nexport const getMonoid\
    \ = <A>(): Monoid<Eq<A>> => ({\n  concat: getSemigroup<A>().concat,\n  empty\n\
    })\n\n/**\n * @category instances\n * @since 2.7.0\n */\nexport const Contravariant:\
    \ Contravariant1<URI> = {\n  URI,\n  contramap: contramap_\n}\n\n// -------------------------------------------------------------------------------------\n\
    // deprecated\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since\
    \ 2.0.0\n * @deprecated\n */\nexport const getTupleEq: <T extends ReadonlyArray<Eq<any>>>(\n\
    \  ...eqs: T\n) => Eq<{ [K in keyof T]: T[K] extends Eq<infer A> ? A : never }>\
    \ = tuple\n\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of\
    \ death\n * @since 2.0.0\n * @deprecated\n */\nexport const getStructEq: <O extends\
    \ ReadonlyRecord<string, any>>(eqs: { [K in keyof O]: Eq<O[K]> }) => Eq<O> = struct\n\
    \n/**\n * Use [`eqStrict`](#eqstrict) instead\n *\n * @category zone of death\n\
    \ * @since 2.0.0\n * @deprecated\n */\nexport const strictEqual: <A>(a: A, b:\
    \ A) => boolean = eqStrict.equals\n\n/**\n * This instance is deprecated, use\
    \ small, specific instances instead.\n * For example if a function needs a `Contravariant`\
    \ instance, pass `E.Contravariant` instead of `E.eq`\n * (where `E` is from `import\
    \ E from 'fp-ts/Eq'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const eq: Contravariant1<URI> = Contravariant\n\n/**\n * Use [`Eq`](./boolean.ts.html#eq)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const eqBoolean: Eq<boolean> = eqStrict\n\n/**\n * Use [`Eq`](./string.ts.html#eq)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const eqString: Eq<string> = eqStrict\n\n/**\n * Use [`Eq`](./number.ts.html#eq)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const eqNumber: Eq<number> = eqStrict\n\n/**\n * Use [`Eq`](./Date.ts.html#eq)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const eqDate: Eq<Date> = {\n  equals: (first, second) => first.valueOf()\
    \ === second.valueOf()\n}\n\n\n### Dependency File: Ring.ts\n/**\n * The `Ring`\
    \ class is for types that support addition, multiplication, and subtraction operations.\n\
    \ *\n * Instances must satisfy the following law in addition to the `Semiring`\
    \ laws:\n *\n * - Additive inverse: `a - a <-> (zero - a) + a <-> zero`\n *\n\
    \ * Adapted from https://github.com/purescript/purescript-prelude/blob/master/src/Data/Ring.purs\n\
    \ *\n * @since 2.0.0\n */\nimport { getRing } from './function'\nimport { Semiring\
    \ } from './Semiring'\n\n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface Ring<A> extends\
    \ Semiring<A> {\n  readonly sub: (x: A, y: A) => A\n}\n\n// -------------------------------------------------------------------------------------\n\
    // combinators\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Given a tuple of `Ring`s returns a `Ring` for the tuple\n *\n * @example\n\
    \ * import { tuple } from 'fp-ts/Ring'\n * import * as N from 'fp-ts/number'\n\
    \ *\n * const R = tuple(N.Field, N.Field, N.Field)\n * assert.deepStrictEqual(R.add([1,\
    \ 2, 3], [4, 5, 6]), [5, 7, 9])\n * assert.deepStrictEqual(R.mul([1, 2, 3], [4,\
    \ 5, 6]), [4, 10, 18])\n * assert.deepStrictEqual(R.one, [1, 1, 1])\n * assert.deepStrictEqual(R.sub([1,\
    \ 2, 3], [4, 5, 6]), [-3, -3, -3])\n * assert.deepStrictEqual(R.zero, [0, 0, 0])\n\
    \ *\n * @since 2.10.0\n */\nexport const tuple = <A extends ReadonlyArray<unknown>>(...rings:\
    \ { [K in keyof A]: Ring<A[K]> }): Ring<Readonly<A>> =>\n  ({\n    add: (x: any,\
    \ y: any) => rings.map((R, i) => R.add(x[i], y[i])),\n    zero: rings.map((R)\
    \ => R.zero),\n    mul: (x: any, y: any) => rings.map((R, i) => R.mul(x[i], y[i])),\n\
    \    one: rings.map((R) => R.one),\n    sub: (x: any, y: any) => rings.map((R,\
    \ i) => R.sub(x[i], y[i]))\n  } as any)\n\n// -------------------------------------------------------------------------------------\n\
    // utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * `negate x` can be used as a shorthand for `zero - x`\n *\n * @since\
    \ 2.0.0\n */\nexport const negate =\n  <A>(R: Ring<A>) =>\n  (a: A): A =>\n  \
    \  R.sub(R.zero, a)\n\n// -------------------------------------------------------------------------------------\n\
    // deprecated\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since\
    \ 2.0.0\n * @deprecated\n */\nexport const getTupleRing: <T extends ReadonlyArray<Ring<any>>>(\n\
    \  ...rings: T\n) => Ring<{ [K in keyof T]: T[K] extends Ring<infer A> ? A : never\
    \ }> = tuple as any\n\n/**\n * Use [`getRing`](./function.ts.html#getring) instead.\n\
    \ *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport\
    \ const getFunctionRing: <A, B>(R: Ring<B>) => Ring<(a: A) => B> = getRing\n\n\
    Output the complete test file, code only, no explanations.\n### Time\nCurrent\
    \ time: 2025-04-03 22:58:53\n"
  role: user

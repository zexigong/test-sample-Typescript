messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: next\nSource File Path: packages/next/src/shared/lib/router/utils/interception-routes.ts\n\
    Test File Path: packages/next/src/shared/lib/router/utils/interception-routes.test.ts\n\
    Project Programming Language: typescript\nTesting Framework: jest\n### Source\
    \ File Content\n\n### Source File Dependency Files Content\n### Dependency File:\
    \ app-paths.ts\nimport { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\n\
    import { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route\
    \ so it represents the actual request path. Essentially\n * performing the following\
    \ transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n *\
    \ - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n\
    \ * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route`\
    \ to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route`\
    \ to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n\
    \ * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns\
    \ the normalized pathname\n */\nexport function normalizeAppPath(route: string)\
    \ {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment,\
    \ index, segments) => {\n      // Empty segments are ignored.\n      if (!segment)\
    \ {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if\
    \ (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel\
    \ segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n\
    \      }\n\n      // The last segment (if it's a leaf) should be ignored.\n  \
    \    if (\n        (segment === 'page' || segment === 'route') &&\n        index\
    \ === segments.length - 1\n      ) {\n        return pathname\n      }\n\n   \
    \   return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the\
    \ `.rsc` extension if it's in the pathname.\n * Since this function is used on\
    \ full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url:\
    \ string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?`\
    \ is preserved\n    '$1'\n  )\n}\n\nOutput the complete test file, code only,\
    \ no explanations.\n### Time\nCurrent time: 2025-04-11 20:34:05\n"
  role: user

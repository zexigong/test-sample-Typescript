messages:
- content: You are an AI agent expert in writing unit tests. Your task is to write
    unit tests for the given code files of the repository. Make sure the tests can
    be executed without lint or compile errors.
  role: system
- content: "### Task Information\nBased on the source code, write/rewrite tests to\
    \ cover the source code.\nRepository: fp-ts\nSource File Path: src/IORef.ts\n\
    Test File Path: test/IORef.ts\nProject Programming Language: typescript\nTesting\
    \ Framework: vitest\n### Source File Content\n### Source File Content:\n/**\n\
    \ * Mutable references in the `IO` monad\n *\n * @since 2.0.0\n */\nimport { IO\
    \ } from './IO'\n\n/**\n * @example\n * import { flatMap } from 'fp-ts/IO'\n *\
    \ import { newIORef } from 'fp-ts/IORef'\n *\n * assert.strictEqual(flatMap(newIORef(1),\
    \ ref => flatMap(ref.write(2), () => ref.read))(), 2)\n *\n * @category model\n\
    \ * @since 2.0.0\n */\nexport class IORef<A> {\n  /**\n   * @since 2.0.0\n   */\n\
    \  readonly read: IO<A>\n  constructor(private value: A) {\n    this.read = ()\
    \ => this.value\n    this.write = this.write.bind(this)\n    this.modify = this.modify.bind(this)\n\
    \  }\n  /**\n   * @since 2.0.0\n   */\n  write(a: A): IO<void> {\n    return ()\
    \ => {\n      this.value = a\n    }\n  }\n  /**\n   * @since 2.0.0\n   */\n  modify(f:\
    \ (a: A) => A): IO<void> {\n    return () => {\n      this.value = f(this.value)\n\
    \    }\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport\
    \ function newIORef<A>(a: A): IO<IORef<A>> {\n  return () => new IORef(a)\n}\n\
    \n### Source File Dependency Files Content\n### Dependency File: IO.ts\n/**\n\
    \ * ```ts\n * interface IO<A> {\n *   (): A\n * }\n * ```\n *\n * `IO<A>` represents\
    \ a non-deterministic synchronous computation that can cause side effects, yields\
    \ a value of\n * type `A` and **never fails**.\n *\n * If you want to represent\
    \ a synchronous computation that may fail, please see `IOEither`.\n * If you want\
    \ to represent a synchronous computation that may yield nothing, please see `IOOption`.\n\
    \ *\n * @since 2.0.0\n */\nimport { Applicative1, getApplicativeMonoid } from\
    \ './Applicative'\nimport { apFirst as apFirst_, Apply1, apS as apS_, apSecond\
    \ as apSecond_, getApplySemigroup } from './Apply'\nimport * as chainable from\
    \ './Chain'\nimport { ChainRec1 } from './ChainRec'\nimport { FromIO1 } from './FromIO'\n\
    import { constant, dual, identity } from './function'\nimport { as as as_, asUnit\
    \ as asUnit_, bindTo as bindTo_, flap as flap_, Functor1, let as let__ } from\
    \ './Functor'\nimport * as _ from './internal'\nimport { Monad1 } from './Monad'\n\
    import { MonadIO1 } from './MonadIO'\nimport { Monoid } from './Monoid'\nimport\
    \ { NonEmptyArray } from './NonEmptyArray'\nimport { Pointed1 } from './Pointed'\n\
    import { ReadonlyNonEmptyArray } from './ReadonlyNonEmptyArray'\nimport { Semigroup\
    \ } from './Semigroup'\n\n// -------------------------------------------------------------------------------------\n\
    // model\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category model\n * @since 2.0.0\n */\nexport interface IO<A> {\n  ():\
    \ A\n}\n\nconst _map: Monad1<URI>['map'] = (ma, f) => () => f(ma())\nconst _ap:\
    \ Monad1<URI>['ap'] = (mab, ma) => () => mab()(ma())\nconst _chainRec: ChainRec1<URI>['chainRec']\
    \ = (a, f) => () => {\n  let e = f(a)()\n  while (e._tag === 'Left') {\n    e\
    \ = f(e.left)()\n  }\n  return e.right\n}\n\n/**\n * `map` can be used to turn\
    \ functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and\
    \ return types\n * use the type constructor `F` to represent some computational\
    \ context.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map:\
    \ <A, B>(f: (a: A) => B) => (fa: IO<A>) => IO<B> = (f) => (fa) => _map(fa, f)\n\
    \n/**\n * @since 2.0.0\n */\nexport const ap: <A>(fa: IO<A>) => <B>(fab: IO<(a:\
    \ A) => B>) => IO<B> = (fa) => (fab) => _ap(fab, fa)\n\n/**\n * @category constructors\n\
    \ * @since 2.0.0\n */\nexport const of: <A>(a: A) => IO<A> = constant\n\n/**\n\
    \ * @category sequencing\n * @since 2.14.0\n */\nexport const flatMap: {\n  <A,\
    \ B>(f: (a: A) => IO<B>): (ma: IO<A>) => IO<B>\n  <A, B>(ma: IO<A>, f: (a: A)\
    \ => IO<B>): IO<B>\n} = /*#__PURE__*/ dual(\n  2,\n  <A, B>(ma: IO<A>, f: (a:\
    \ A) => IO<B>): IO<B> =>\n    () =>\n      f(ma())()\n)\n\n/**\n * @category sequencing\n\
    \ * @since 2.0.0\n */\nexport const flatten: <A>(mma: IO<IO<A>>) => IO<A> = /*#__PURE__*/\
    \ flatMap(identity)\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\n\
    export const URI = 'IO'\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\n\
    export type URI = typeof URI\n\ndeclare module './HKT' {\n  interface URItoKind<A>\
    \ {\n    readonly [URI]: IO<A>\n  }\n}\n\n/**\n * @category instances\n * @since\
    \ 2.7.0\n */\nexport const Functor: Functor1<URI> = {\n  URI,\n  map: _map\n}\n\
    \n/**\n * Maps the value to the specified constant value.\n *\n * @category mapping\n\
    \ * @since 2.16.0\n */\nexport const as: {\n  <A>(a: A): <_>(self: IO<_>) => IO<A>\n\
    \  <_, A>(self: IO<_>, a: A): IO<A>\n} = dual(2, as_(Functor))\n\n/**\n * Maps\
    \ the value to the void constant value.\n *\n * @category mapping\n * @since 2.16.0\n\
    \ */\nexport const asUnit: <_>(self: IO<_>) => IO<void> = asUnit_(Functor)\n\n\
    /**\n * @category mapping\n * @since 2.10.0\n */\nexport const flap = /*#__PURE__*/\
    \ flap_(Functor)\n\n/**\n * @category instances\n * @since 2.10.0\n */\nexport\
    \ const Pointed: Pointed1<URI> = {\n  URI,\n  of\n}\n\n/**\n * @category instances\n\
    \ * @since 2.10.0\n */\nexport const Apply: Apply1<URI> = {\n  URI,\n  map: _map,\n\
    \  ap: _ap\n}\n\n/**\n * Combine two effectful actions, keeping only the result\
    \ of the first.\n *\n * @since 2.0.0\n */\nexport const apFirst = /*#__PURE__*/\
    \ apFirst_(Apply)\n\n/**\n * Combine two effectful actions, keeping only the result\
    \ of the second.\n *\n * @since 2.0.0\n */\nexport const apSecond = /*#__PURE__*/\
    \ apSecond_(Apply)\n\n/**\n * @category instances\n * @since 2.7.0\n */\nexport\
    \ const Applicative: Applicative1<URI> = {\n  URI,\n  map: _map,\n  ap: _ap,\n\
    \  of\n}\n\n/**\n * @category instances\n * @since 2.10.0\n */\nexport const Chain:\
    \ chainable.Chain1<URI> = {\n  URI,\n  map: _map,\n  ap: _ap,\n  chain: flatMap\n\
    }\n\n/**\n * @category instances\n * @since 2.7.0\n */\nexport const Monad: Monad1<URI>\
    \ = {\n  URI,\n  map: _map,\n  ap: _ap,\n  of,\n  chain: flatMap\n}\n\n/**\n *\
    \ Composes computations in sequence, using the return value of one computation\
    \ to determine the next computation and\n * keeping only the result of the first.\n\
    \ *\n * @category combinators\n * @since 2.15.0\n */\nexport const tap: {\n  <A,\
    \ _>(self: IO<A>, f: (a: A) => IO<_>): IO<A>\n  <A, _>(f: (a: A) => IO<_>): (self:\
    \ IO<A>) => IO<A>\n} = /*#__PURE__*/ dual(2, chainable.tap(Chain))\n\n/**\n *\
    \ @category zone of death\n * @since 2.7.0\n * @deprecated\n */\nexport const\
    \ fromIO: <A>(fa: IO<A>) => IO<A> = identity\n\n/**\n * @category instances\n\
    \ * @since 2.7.0\n */\nexport const MonadIO: MonadIO1<URI> = {\n  URI,\n  map:\
    \ _map,\n  ap: _ap,\n  of,\n  chain: flatMap,\n  fromIO\n}\n\n/**\n * @category\
    \ instances\n * @since 2.7.0\n */\nexport const ChainRec: ChainRec1<URI> = {\n\
    \  URI,\n  map: _map,\n  ap: _ap,\n  chain: flatMap,\n  chainRec: _chainRec\n\
    }\n\n/**\n * @category instances\n * @since 2.10.0\n */\nexport const FromIO:\
    \ FromIO1<URI> = {\n  URI,\n  fromIO: identity\n}\n\n// -------------------------------------------------------------------------------------\n\
    // do notation\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * @category do notation\n * @since 2.9.0\n */\nexport const Do: IO<{}>\
    \ = /*#__PURE__*/ of(_.emptyRecord)\n\n/**\n * @category do notation\n * @since\
    \ 2.8.0\n */\nexport const bindTo = /*#__PURE__*/ bindTo_(Functor)\n\nconst let_\
    \ = /*#__PURE__*/ let__(Functor)\n\nexport {\n  /**\n   * @category do notation\n\
    \   * @since 2.13.0\n   */\n  let_ as let\n}\n\n/**\n * @category do notation\n\
    \ * @since 2.8.0\n */\nexport const bind = /*#__PURE__*/ chainable.bind(Chain)\n\
    \n/**\n * @category do notation\n * @since 2.8.0\n */\nexport const apS = /*#__PURE__*/\
    \ apS_(Apply)\n\n/**\n * @since 2.11.0\n */\nexport const ApT: IO<readonly []>\
    \ = /*#__PURE__*/ of(_.emptyReadonlyArray)\n\n// -------------------------------------------------------------------------------------\n\
    // array utils\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n\
    \ *\n * @category traversing\n * @since 2.11.0\n */\nexport const traverseReadonlyNonEmptyArrayWithIndex\
    \ =\n  <A, B>(f: (index: number, a: A) => IO<B>) =>\n  (as: ReadonlyNonEmptyArray<A>):\
    \ IO<ReadonlyNonEmptyArray<B>> =>\n  () => {\n    const out: NonEmptyArray<B>\
    \ = [f(0, _.head(as))()]\n    for (let i = 1; i < as.length; i++) {\n      out.push(f(i,\
    \ as[i])())\n    }\n    return out\n  }\n\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n\
    \ *\n * @category traversing\n * @since 2.11.0\n */\nexport const traverseReadonlyArrayWithIndex\
    \ = <A, B>(\n  f: (index: number, a: A) => IO<B>\n): ((as: ReadonlyArray<A>) =>\
    \ IO<ReadonlyArray<B>>) => {\n  const g = traverseReadonlyNonEmptyArrayWithIndex(f)\n\
    \  return (as) => (_.isNonEmpty(as) ? g(as) : ApT)\n}\n\n/**\n * Equivalent to\
    \ `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @category traversing\n\
    \ * @since 2.9.0\n */\nexport const traverseArrayWithIndex: <A, B>(\n  f: (index:\
    \ number, a: A) => IO<B>\n) => (as: ReadonlyArray<A>) => IO<ReadonlyArray<B>>\
    \ = traverseReadonlyArrayWithIndex\n\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n\
    \ *\n * @category traversing\n * @since 2.9.0\n */\nexport const traverseArray\
    \ = <A, B>(f: (a: A) => IO<B>): ((as: ReadonlyArray<A>) => IO<ReadonlyArray<B>>)\
    \ =>\n  traverseReadonlyArrayWithIndex((_, a) => f(a))\n\n/**\n * Equivalent to\
    \ `ReadonlyArray#sequence(Applicative)`.\n *\n * @category traversing\n * @since\
    \ 2.9.0\n */\nexport const sequenceArray: <A>(arr: ReadonlyArray<IO<A>>) => IO<ReadonlyArray<A>>\
    \ =\n  /*#__PURE__*/ traverseArray(identity)\n\n// -------------------------------------------------------------------------------------\n\
    // legacy\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\n\
    export const chain: <A, B>(f: (a: A) => IO<B>) => (ma: IO<A>) => IO<B> = flatMap\n\
    \n/**\n * Alias of `tap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexport\
    \ const chainFirst: <A, B>(f: (a: A) => IO<B>) => (first: IO<A>) => IO<A> = tap\n\
    \n// -------------------------------------------------------------------------------------\n\
    // deprecated\n// -------------------------------------------------------------------------------------\n\
    \n/**\n * This instance is deprecated, use small, specific instances instead.\n\
    \ * For example if a function needs a `Functor` instance, pass `IO.Functor` instead\
    \ of `IO.io`\n * (where `IO` is from `import IO from 'fp-ts/IO'`)\n *\n * @category\
    \ zone of death\n * @since 2.0.0\n * @deprecated\n */\nexport const io: Monad1<URI>\
    \ & MonadIO1<URI> & ChainRec1<URI> = {\n  URI,\n  map: _map,\n  of,\n  ap: _ap,\n\
    \  chain: flatMap,\n  fromIO,\n  chainRec: _chainRec\n}\n\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const getSemigroup: <A>(S: Semigroup<A>) => Semigroup<IO<A>> = /*#__PURE__*/\
    \ getApplySemigroup(Apply)\n\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid)\
    \ instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n\
    \ */\nexport const getMonoid: <A>(M: Monoid<A>) => Monoid<IO<A>> = /*#__PURE__*/\
    \ getApplicativeMonoid(Applicative)\n\nOutput the complete test file, code only,\
    \ no explanations.\n### Time\nCurrent time: 2025-04-03 22:59:35\n"
  role: user
